/* A RapidNet application. Generated by RapidNet compiler. */

#include "vqa-query.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::vqaquery;

const string VqaQuery::PRETURN = "pReturn";
const string VqaQuery::PERIODIC = "periodic";
const string VqaQuery::PROVQUERY = "provQuery";
const string VqaQuery::Q1_ECAPERIODIC = "q1_ecaperiodic";
const string VqaQuery::RECORDS = "records";
const string VqaQuery::TUPLE = "tuple";

NS_LOG_COMPONENT_DEFINE ("VqaQuery");
NS_OBJECT_ENSURE_REGISTERED (VqaQuery);

TypeId
VqaQuery::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::vqaquery::VqaQuery")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<VqaQuery> ()
    ;
  return tid;
}

VqaQuery::VqaQuery()
{
  NS_LOG_FUNCTION_NOARGS ();
}

VqaQuery::~VqaQuery()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
VqaQuery::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
VqaQuery::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  m_event_q1_ecaperiodic=
    Simulator::Schedule (Seconds (0), &VqaQuery::Q1_ecaperiodic, this);
  m_count_q1_ecaperiodic = 0;
  RAPIDNET_LOG_INFO("VqaQuery Application Started");
}

void
VqaQuery::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  Simulator::Cancel(m_event_q1_ecaperiodic);
  RAPIDNET_LOG_INFO("VqaQuery Application Stopped");
}

void
VqaQuery::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (RECORDS, attrdeflist (
    attrdef ("records_attr1", IPV4),
    attrdef ("records_attr2", ID),
    attrdef ("records_attr3", ID)));

  AddRelationWithKeys (TUPLE, attrdeflist (
    attrdef ("tuple_attr1", IPV4),
    attrdef ("tuple_attr2", STR)));

}

void
VqaQuery::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, Q1_ECAPERIODIC))
    {
      Q1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Q2_eca (tuple);
    }
}

void
VqaQuery::Q1_ecaperiodic ()
{
  RAPIDNET_LOG_INFO ("Q1_ecaperiodic triggered");

  SendLocal (tuple (Q1_ECAPERIODIC, attrlist (
    attr ("q1_ecaperiodic_attr1", Ipv4Value, GetAddress ()),
    attr ("q1_ecaperiodic_attr2", Int32Value, rand ()))));

  if (++m_count_q1_ecaperiodic < 2)
    {
      m_event_q1_ecaperiodic = Simulator::Schedule (Seconds(10),
        &VqaQuery::Q1_ecaperiodic, this);
    }
}

void
VqaQuery::Q1_eca (Ptr<Tuple> q1_ecaperiodic)
{
  RAPIDNET_LOG_INFO ("Q1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TUPLE)->Join (
    q1_ecaperiodic,
    strlist ("tuple_attr1"),
    strlist ("q1_ecaperiodic_attr1"));

  result->Assign (Assignor::New ("UID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("tuple_attr2"),
          VarExpr::New ("tuple_attr3")),
        VarExpr::New ("tuple_attr4")))));

  result->Assign (Assignor::New ("Time",
    FNow::New (
)));

  result->Assign (Assignor::New ("QID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("UID")),
        VarExpr::New ("Time")))));

  result = result->Project (
    PROVQUERY,
    strlist ("tuple_attr3",
      "QID",
      "UID",
      "q1_ecaperiodic_attr1",
      "tuple_attr3"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4",
      RN_DEST));

  Send (result);
}

void
VqaQuery::Q2_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Q2_eca triggered");

  Ptr<Tuple> result = pReturn;

  result = result->Project (
    RECORDS,
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4"),
    strlist ("records_attr1",
      "records_attr2",
      "records_attr3",
      "records_attr4"));

  Insert (result);
}

