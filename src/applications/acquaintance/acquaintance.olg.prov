materialize(know, -1, 0, keys(1, 2, 3)
materialize(knowEvent, -1, 0, keys(1, 2, 3)
materialize(like, -1, 0, keys(1, 2, 3)
materialize(likeEvent, -1, 0, keys(1, 2, 3)
materialize(live, -1, 0, keys(1, 2, 3)
materialize(liveEvent, -1, 0, keys(1, 2, 3)
materialize(pQList, -1, 0, keys(1, 2)
materialize(pResultTmp, -1, 0, keys(1, 2)
materialize(prov, -1, 0, keys(1, 2, 3)
materialize(rQList, -1, 0, keys(1, 2)
materialize(rResultTmp, -1, 0, keys(1, 2)
materialize(relation, -1, 0, keys(1, 2, 3)
materialize(ruleExec, -1, 0, keys(1, 2)
materialize(shaResult, -1, 0, keys(1, 2, 3)
prov_ra_1 eliveTemp(@RLOC, Local, A, C, RID, RWeight, R, List) :- liveEvent(@Local, A, C), PID1 := f_sha1(((liveEvent+ Local)+ A)+ C), List := f_append(PID1), RLOC := Local, RWeight := 1, R := ra, RID := f_sha1((R+ RLOC)+ List).
prov_ra_2 ruleExec(@RLOC, RID, RWeight, R, List) :- eliveTemp(@RLOC, Local, A, C, RID, RWeight, R, List).
prov_ra_3 elive(@Local, A, C, RID, RWeight, RLOC) :- eliveTemp(@RLOC, Local, A, C, RID, RWeight, R, List).
prov_ra_4 live(@Local, A, C) :- elive(@Local, A, C, RID, RWeight, RLOC).
prov_ra_5 prov(@Local, VID, RID, RLOC, Score) :- elive(@Local, A, C, RID, RWeight, RLOC), VID := f_sha1(((live+ Local)+ A)+ C), Score := -1.
prov_rb_1 elikeTemp(@RLOC, Local, A, C, RID, RWeight, R, List) :- likeEvent(@Local, A, C), PID1 := f_sha1(((likeEvent+ Local)+ A)+ C), List := f_append(PID1), RLOC := Local, RWeight := 1, R := rb, RID := f_sha1((R+ RLOC)+ List).
prov_rb_2 ruleExec(@RLOC, RID, RWeight, R, List) :- elikeTemp(@RLOC, Local, A, C, RID, RWeight, R, List).
prov_rb_3 elike(@Local, A, C, RID, RWeight, RLOC) :- elikeTemp(@RLOC, Local, A, C, RID, RWeight, R, List).
prov_rb_4 like(@Local, A, C) :- elike(@Local, A, C, RID, RWeight, RLOC).
prov_rb_5 prov(@Local, VID, RID, RLOC, Score) :- elike(@Local, A, C, RID, RWeight, RLOC), VID := f_sha1(((like+ Local)+ A)+ C), Score := -1.
prov_rc_1 eknowTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List) :- knowEvent(@Local, A, B, S), PID1 := f_sha1((((knowEvent+ Local)+ A)+ B)+ S), List := f_append(PID1), RLOC := Local, RWeight := 1, R := rc, RID := f_sha1((R+ RLOC)+ List).
prov_rc_2 ruleExec(@RLOC, RID, RWeight, R, List) :- eknowTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List).
prov_rc_3 eknow(@Local, A, B, S, RID, RWeight, RLOC) :- eknowTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List).
prov_rc_4 know(@Local, A, B, S) :- eknow(@Local, A, B, S, RID, RWeight, RLOC).
prov_rc_5 prov(@Local, VID, RID, RLOC, Score) :- eknow(@Local, A, B, S, RID, RWeight, RLOC), VID := f_sha1((((know+ Local)+ A)+ B)+ S), Score := -1.
prov_r1_1 eknowEventTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List) :- liveEvent(@Local, A, C), PID1 := f_sha1(((liveEvent+ Local)+ A)+ C), List := f_append(PID1), live(@Local, B, C), PID2 := f_sha1(((live+ Local)+ B)+ C), List2 := f_append(PID2), List := f_concat(List, List2), A != B, S := 1, RLOC := Local, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
prov_r1_2 ruleExec(@RLOC, RID, RWeight, R, List) :- eknowEventTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List).
prov_r1_3 eknowEvent(@Local, A, B, S, RID, RWeight, RLOC) :- eknowEventTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List).
prov_r1_4 knowEvent(@Local, A, B, S) :- eknowEvent(@Local, A, B, S, RID, RWeight, RLOC).
prov_r1_5 prov(@Local, VID, RID, RLOC, Score) :- eknowEvent(@Local, A, B, S, RID, RWeight, RLOC), VID := f_sha1((((knowEvent+ Local)+ A)+ B)+ S), Score := -1.
prov_r2_1 eknowEventTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List) :- likeEvent(@Local, A, C), PID1 := f_sha1(((likeEvent+ Local)+ A)+ C), List := f_append(PID1), like(@Local, B, C), PID2 := f_sha1(((like+ Local)+ B)+ C), List2 := f_append(PID2), List := f_concat(List, List2), A != B, S := 1, RLOC := Local, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
prov_r4_1 eknowEventTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List) :- relation(@Local, A, B), PID1 := f_sha1(((relation+ Local)+ A)+ B), List := f_append(PID1), A != B, S := 0, RLOC := Local, RWeight := 1, R := r4, RID := f_sha1((R+ RLOC)+ List).
prov_r5_1 eknowEventTemp(@RLOC, Local, A, B, S, RID, RWeight, R, List) :- liveEvent(@Local, A, C1), PID1 := f_sha1(((liveEvent+ Local)+ A)+ C1), List := f_append(PID1), live(@Local, B, C2), PID2 := f_sha1(((live+ Local)+ B)+ C2), List2 := f_append(PID2), List := f_concat(List, List2), C1 != C2, A != B, S := 0, RLOC := Local, RWeight := 1, R := r5, RID := f_sha1((R+ RLOC)+ List).
prov_r6_1 eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List) :- liveEvent(@Local, A, C), PID1 := f_sha1(((liveEvent+ Local)+ A)+ C), List := f_append(PID1), VID := f_sha1(((liveEvent+ Local)+ A)+ C), Name := liveEvent, Content := (Name+ A)+ C, RLOC := Local, RWeight := 1, R := r6, RID := f_sha1((R+ RLOC)+ List).
prov_r6_2 ruleExec(@RLOC, RID, RWeight, R, List) :- eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List).
prov_r6_3 eshaResult(@Local, VID, Content, RID, RWeight, RLOC) :- eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List).
prov_r6_4 shaResult(@Local, VID, Content) :- eshaResult(@Local, VID, Content, RID, RWeight, RLOC).
prov_r6_5 prov(@Local, VID, RID, RLOC, Score) :- eshaResult(@Local, VID, Content, RID, RWeight, RLOC), VID := f_sha1(((shaResult+ Local)+ VID)+ Content), Score := -1.
prov_r7_1 eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List) :- likeEvent(@Local, A, C), PID1 := f_sha1(((likeEvent+ Local)+ A)+ C), List := f_append(PID1), VID := f_sha1(((likeEvent+ Local)+ A)+ C), Name := likeEvent, Content := (Name+ A)+ C, RLOC := Local, RWeight := 1, R := r7, RID := f_sha1((R+ RLOC)+ List).
prov_r8_1 eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List) :- knowEvent(@Local, A, B, S), PID1 := f_sha1((((knowEvent+ Local)+ A)+ B)+ S), List := f_append(PID1), VID := f_sha1((((knowEvent+ Local)+ A)+ B)+ S), Name := knowEvent, Content := ((Name+ A)+ B)+ S, RLOC := Local, RWeight := 1, R := r8, RID := f_sha1((R+ RLOC)+ List).
prov_r9_1 eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List) :- relation(@Local, A, B), PID1 := f_sha1(((relation+ Local)+ A)+ B), List := f_append(PID1), VID := f_sha1(((relation+ Local)+ A)+ C), Name := relation, Content := (Name+ A)+ B, RLOC := Local, RWeight := 1, R := r9, RID := f_sha1((R+ RLOC)+ List).
prov_r10_1 eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List) :- live(@Local, A, C), PID1 := f_sha1(((live+ Local)+ A)+ C), List := f_append(PID1), VID := f_sha1(((live+ Local)+ A)+ C), Name := live, Content := (Name+ A)+ C, RLOC := Local, RWeight := 1, R := r10, RID := f_sha1((R+ RLOC)+ List).
prov_r11_1 eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List) :- like(@Local, A, C), PID1 := f_sha1(((like+ Local)+ A)+ C), List := f_append(PID1), VID := f_sha1(((like+ Local)+ A)+ C), Name := like, Content := (Name+ A)+ C, RLOC := Local, RWeight := 1, R := r11, RID := f_sha1((R+ RLOC)+ List).
prov_r12_1 eshaResultTemp(@RLOC, Local, VID, Content, RID, RWeight, R, List) :- know(@Local, A, B, S), PID1 := f_sha1((((know+ Local)+ A)+ B)+ S), List := f_append(PID1), VID := f_sha1((((know+ Local)+ A)+ B)+ S), Name := know, Content := ((Name+ A)+ B)+ S, RLOC := Local, RWeight := 1, R := r12, RID := f_sha1((R+ RLOC)+ List).
prov_edb_1 prov(@Local, VID, RID, RLoc, Score) :- RLoc := Local, likeEvent(@Local, A, C), VID := f_sha1(((likeEvent+ Local)+ A)+ C), RID := VID, Score := -1.
prov_edb_2 prov(@Local, VID, RID, RLoc, Score) :- RLoc := Local, liveEvent(@Local, A, C), VID := f_sha1(((liveEvent+ Local)+ A)+ C), RID := VID, Score := -1.
prov_edb_3 prov(@Local, VID, RID, RLoc, Score) :- RLoc := Local, relation(@Local, A, B), VID := f_sha1(((relation+ Local)+ A)+ B), RID := VID, Score := -1.
edb1 pReturn(@Ret, QID, VID, Prov) :- provQuery(@X, QID, VID, Ret), prov(@X, VID, RID, RLoc, Score), RID == VID, Prov := f_pEDB(VID, X).
idb1 pQList(@X, QID, LIST< RID >) :- provQuery(@X, QID, VID, Ret), prov(@X, VID, RID, RLoc, Score), RID != VID.
idb2 pResultTmp(@X, QID, Ret, VID, Buf) :- provQuery(@X, QID, VID, Ret), Buf := f_empty().
idb3 pIterate(@X, QID, N) :- provQuery(@X, QID, VID, Ret), N := 1.
idb4 pIterate(@X, QID, N) :- pIterate(@X, QID, N1), pQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
idb5 eRuleQuery(@X, NQID, RID) :- pIterate(@X, QID, N), pQList(@X, QID, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
idb6 ruleQuery(@RLoc, QID, RID, X) :- eRuleQuery(@X, QID, RID), prov(@X, VID, RID, RLoc, Score).
idb7 pResultTmp(@X, QID, Ret, VID, Buf) :- rReturn(@X, NQID, RID, Prov), pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
idb8 ePReturn(@X, QID) :- pResultTmp(@X, QID, Ret, VID, Buf), pQList(@X, QID, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
idb9 pReturn(@Ret, QID, VID, Prov) :- ePReturn(@X, QID), pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
rv1 rQList(@X, QID, List) :- ruleQuery(@X, QID, RID, Ret), ruleExec(@X, RID, RWeight, R, List).
rv2 rResultTmp(@X, QID, Ret, RID, Buf) :- ruleQuery(@X, QID, RID, Ret), Buf := f_empty().
rv3 rIterate(@X, QID, N) :- ruleQuery(@X, QID, RID, Ret), N := 1.
rv4 rIterate(@X, QID, N) :- rIterate(@X, QID, N1), rQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
rv5 eProvQuery(@X, NQID, VID) :- rIterate(@X, QID, N), rQList(@X, QID, List), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
rv6 provQuery(@X, QID, VID, $1) :- $1 := X, eProvQuery(@X, QID, VID).
rv7 rResultTmp(@X, QID, Ret, RID, Buf) :- pReturn(@X, NQID, VID, Prov), rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
rv8 eRReturn(@X, QID) :- rResultTmp(@X, QID, Ret, RID, Buf), rQList(@X, QID, List), f_size(Buf) == f_size(List).
rv9 rReturn(@Ret, QID, RID, Prov) :- eRReturn(@X, QID), rResultTmp(@X, QID, Ret, RID, Buf), ruleExec(@X, RID, RWeight, R, List), Prov := f_pRULE(Buf, X, R, RWeight).
