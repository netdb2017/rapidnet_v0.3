/* A RapidNet application. Generated by RapidNet compiler. */

#include "messf.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::messf;

const string Messf::EPRETURN = "ePReturn";
const string Messf::EPROVQUERY = "eProvQuery";
const string Messf::ERRETURN = "eRReturn";
const string Messf::ERULEQUERY = "eRuleQuery";
const string Messf::EFINAL = "efinal";
const string Messf::EFINALDELETE = "efinalDelete";
const string Messf::EFINALTEMP = "efinalTemp";
const string Messf::EFINALTEMPDELETE = "efinalTempDelete";
const string Messf::EMSG = "emsg";
const string Messf::EMSGDELETE = "emsgDelete";
const string Messf::EMSGTEMP = "emsgTemp";
const string Messf::EMSGTEMPDELETE = "emsgTempDelete";
const string Messf::FINAL = "final";
const string Messf::LINK = "link";
const string Messf::MSG = "msg";
const string Messf::MSGDELETE = "msgDelete";
const string Messf::PITERATE = "pIterate";
const string Messf::PQLIST = "pQList";
const string Messf::PRESULTTMP = "pResultTmp";
const string Messf::PRETURN = "pReturn";
const string Messf::PROV = "prov";
const string Messf::PROVQUERY = "provQuery";
const string Messf::RITERATE = "rIterate";
const string Messf::RQLIST = "rQList";
const string Messf::RRESULTTMP = "rResultTmp";
const string Messf::RRETURN = "rReturn";
const string Messf::RULEEXEC = "ruleExec";
const string Messf::RULEQUERY = "ruleQuery";
const string Messf::SOURCE = "source";

NS_LOG_COMPONENT_DEFINE ("Messf");
NS_OBJECT_ENSURE_REGISTERED (Messf);

TypeId
Messf::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::messf::Messf")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Messf> ()
    ;
  return tid;
}

Messf::Messf()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Messf::~Messf()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Messf::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Messf::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Messf Application Started");
}

void
Messf::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Messf Application Stopped");
}

void
Messf::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (FINAL, attrdeflist (
    attrdef ("final_attr1", IPV4),
    attrdef ("final_attr2", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr1", IPV4),
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr1", IPV4),
    attrdef ("ruleExec_attr2", ID)));

  AddRelationWithKeys (SOURCE, attrdeflist (
    attrdef ("source_attr1", IPV4),
    attrdef ("source_attr2", IPV4)));

}

void
Messf::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, SOURCE))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SOURCE))
    {
      Prov_r1_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, EMSGTEMP))
    {
      Prov_r1_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMSGTEMPDELETE))
    {
      Prov_r1_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMSGTEMP))
    {
      Prov_r1_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMSGTEMPDELETE))
    {
      Prov_r1_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMSG))
    {
      Prov_r1_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMSGDELETE))
    {
      Prov_r1_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMSG))
    {
      Prov_r1_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMSGDELETE))
    {
      Prov_r1_5_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, MSG))
    {
      Prov_r2_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, MSGDELETE))
    {
      Prov_r2_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, MSG))
    {
      Prov_r3_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, MSGDELETE))
    {
      Prov_r3_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EFINALTEMP))
    {
      Prov_r3_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EFINALTEMPDELETE))
    {
      Prov_r3_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EFINALTEMP))
    {
      Prov_r3_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EFINALTEMPDELETE))
    {
      Prov_r3_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EFINAL))
    {
      Prov_r3_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EFINALDELETE))
    {
      Prov_r3_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EFINAL))
    {
      Prov_r3_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EFINALDELETE))
    {
      Prov_r3_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_edb_1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      Prov_edb_1Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, SOURCE))
    {
      Prov_edb_2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SOURCE))
    {
      Prov_edb_2Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Edb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERULEQUERY))
    {
      Idb6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PQLIST))
    {
      Idb8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPRETURN))
    {
      Idb9_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPROVQUERY))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv9_eca (tuple);
    }
}

void
Messf::Prov_r1_1Eca0Ins (Ptr<Tuple> source)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<Tuple> result = source;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("source")),
            VarExpr::New ("source_attr1")),
          VarExpr::New ("source_attr2")),
        VarExpr::New ("source_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("TTL",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("source_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EMSGTEMP,
    strlist ("RLOC",
      "source_attr1",
      "source_attr2",
      "source_attr3",
      "TTL",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emsgTemp_attr1",
      "emsgTemp_attr2",
      "emsgTemp_attr3",
      "emsgTemp_attr4",
      "emsgTemp_attr5",
      "emsgTemp_attr6",
      "emsgTemp_attr7",
      "emsgTemp_attr8",
      "emsgTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r1_1Eca0Del (Ptr<Tuple> source)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Del triggered");

  Ptr<Tuple> result = source;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("source")),
            VarExpr::New ("source_attr1")),
          VarExpr::New ("source_attr2")),
        VarExpr::New ("source_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("TTL",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("source_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EMSGTEMPDELETE,
    strlist ("RLOC",
      "source_attr1",
      "source_attr2",
      "source_attr3",
      "TTL",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emsgTempDelete_attr1",
      "emsgTempDelete_attr2",
      "emsgTempDelete_attr3",
      "emsgTempDelete_attr4",
      "emsgTempDelete_attr5",
      "emsgTempDelete_attr6",
      "emsgTempDelete_attr7",
      "emsgTempDelete_attr8",
      "emsgTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r1_2_ecaAdd (Ptr<Tuple> emsgTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaAdd triggered");

  Ptr<Tuple> result = emsgTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("emsgTemp_attr1",
      "emsgTemp_attr6",
      "emsgTemp_attr7",
      "emsgTemp_attr8",
      "emsgTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Messf::Prov_r1_2_ecaDel (Ptr<Tuple> emsgTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaDel triggered");

  Ptr<Tuple> result = emsgTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("emsgTempDelete_attr1",
      "emsgTempDelete_attr6",
      "emsgTempDelete_attr7",
      "emsgTempDelete_attr8",
      "emsgTempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Messf::Prov_r1_3_ecaAdd (Ptr<Tuple> emsgTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaAdd triggered");

  Ptr<Tuple> result = emsgTemp;

  result = result->Project (
    EMSG,
    strlist ("emsgTemp_attr2",
      "emsgTemp_attr3",
      "emsgTemp_attr4",
      "emsgTemp_attr5",
      "emsgTemp_attr6",
      "emsgTemp_attr7",
      "emsgTemp_attr1",
      "emsgTemp_attr2"),
    strlist ("emsg_attr1",
      "emsg_attr2",
      "emsg_attr3",
      "emsg_attr4",
      "emsg_attr5",
      "emsg_attr6",
      "emsg_attr7",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r1_3_ecaDel (Ptr<Tuple> emsgTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaDel triggered");

  Ptr<Tuple> result = emsgTempDelete;

  result = result->Project (
    EMSGDELETE,
    strlist ("emsgTempDelete_attr2",
      "emsgTempDelete_attr3",
      "emsgTempDelete_attr4",
      "emsgTempDelete_attr5",
      "emsgTempDelete_attr6",
      "emsgTempDelete_attr7",
      "emsgTempDelete_attr1",
      "emsgTempDelete_attr2"),
    strlist ("emsgDelete_attr1",
      "emsgDelete_attr2",
      "emsgDelete_attr3",
      "emsgDelete_attr4",
      "emsgDelete_attr5",
      "emsgDelete_attr6",
      "emsgDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r1_4_ecaAdd (Ptr<Tuple> emsg)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaAdd triggered");

  Ptr<Tuple> result = emsg;

  result = result->Project (
    MSG,
    strlist ("emsg_attr1",
      "emsg_attr2",
      "emsg_attr3",
      "emsg_attr4"),
    strlist ("msg_attr1",
      "msg_attr2",
      "msg_attr3",
      "msg_attr4"));

  SendLocal (result);
}

void
Messf::Prov_r1_4_ecaDel (Ptr<Tuple> emsgDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaDel triggered");

  Ptr<Tuple> result = emsgDelete;

  result = result->Project (
    MSG,
    strlist ("emsgDelete_attr1",
      "emsgDelete_attr2",
      "emsgDelete_attr3",
      "emsgDelete_attr4"),
    strlist ("msg_attr1",
      "msg_attr2",
      "msg_attr3",
      "msg_attr4"));

  SendLocal (result);
}

void
Messf::Prov_r1_5_ecaAdd (Ptr<Tuple> emsg)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaAdd triggered");

  Ptr<Tuple> result = emsg;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("msg")),
              VarExpr::New ("emsg_attr1")),
            VarExpr::New ("emsg_attr2")),
          VarExpr::New ("emsg_attr3")),
        VarExpr::New ("emsg_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("emsg_attr1",
      "VID",
      "emsg_attr5",
      "emsg_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Messf::Prov_r1_5_ecaDel (Ptr<Tuple> emsgDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaDel triggered");

  Ptr<Tuple> result = emsgDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("msg")),
              VarExpr::New ("emsgDelete_attr1")),
            VarExpr::New ("emsgDelete_attr2")),
          VarExpr::New ("emsgDelete_attr3")),
        VarExpr::New ("emsgDelete_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("emsgDelete_attr1",
      "VID",
      "emsgDelete_attr5",
      "emsgDelete_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Messf::Prov_r2_1_ecaAdd (Ptr<Tuple> msg)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1_ecaAdd triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    msg,
    strlist ("link_attr1"),
    strlist ("msg_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("msg_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("msg")),
              VarExpr::New ("msg_attr1")),
            VarExpr::New ("msg_attr2")),
          VarExpr::New ("msg_attr3")),
        VarExpr::New ("msg_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("TTL1",
    Operation::New (RN_PLUS,
      VarExpr::New ("msg_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("S",
    Operation::New (RN_TIMES,
      VarExpr::New ("link_attr3"),
      VarExpr::New ("msg_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("msg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.9))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("msg_attr4"),
      ValueExpr::New (Int32Value::New (5)))));

  result = result->Project (
    EMSGTEMP,
    strlist ("RLOC",
      "link_attr2",
      "msg_attr2",
      "S",
      "TTL1",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emsgTemp_attr1",
      "emsgTemp_attr2",
      "emsgTemp_attr3",
      "emsgTemp_attr4",
      "emsgTemp_attr5",
      "emsgTemp_attr6",
      "emsgTemp_attr7",
      "emsgTemp_attr8",
      "emsgTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r2_1_ecaDel (Ptr<Tuple> msgDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1_ecaDel triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    msgDelete,
    strlist ("link_attr1"),
    strlist ("msgDelete_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("msgDelete_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("msg")),
              VarExpr::New ("msgDelete_attr1")),
            VarExpr::New ("msgDelete_attr2")),
          VarExpr::New ("msgDelete_attr3")),
        VarExpr::New ("msgDelete_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("TTL1",
    Operation::New (RN_PLUS,
      VarExpr::New ("msgDelete_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("S",
    Operation::New (RN_TIMES,
      VarExpr::New ("link_attr3"),
      VarExpr::New ("msgDelete_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("msgDelete_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.9))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("msgDelete_attr4"),
      ValueExpr::New (Int32Value::New (5)))));

  result = result->Project (
    EMSGTEMPDELETE,
    strlist ("RLOC",
      "link_attr2",
      "msgDelete_attr2",
      "S",
      "TTL1",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emsgTempDelete_attr1",
      "emsgTempDelete_attr2",
      "emsgTempDelete_attr3",
      "emsgTempDelete_attr4",
      "emsgTempDelete_attr5",
      "emsgTempDelete_attr6",
      "emsgTempDelete_attr7",
      "emsgTempDelete_attr8",
      "emsgTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r3_1_ecaAdd (Ptr<Tuple> msg)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1_ecaAdd triggered");

  Ptr<Tuple> result = msg;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("msg")),
              VarExpr::New ("msg_attr1")),
            VarExpr::New ("msg_attr2")),
          VarExpr::New ("msg_attr3")),
        VarExpr::New ("msg_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("msg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EFINALTEMP,
    strlist ("RLOC",
      "msg_attr1",
      "msg_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("efinalTemp_attr1",
      "efinalTemp_attr2",
      "efinalTemp_attr3",
      "efinalTemp_attr4",
      "efinalTemp_attr5",
      "efinalTemp_attr6",
      "efinalTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r3_1_ecaDel (Ptr<Tuple> msgDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1_ecaDel triggered");

  Ptr<Tuple> result = msgDelete;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("msg")),
              VarExpr::New ("msgDelete_attr1")),
            VarExpr::New ("msgDelete_attr2")),
          VarExpr::New ("msgDelete_attr3")),
        VarExpr::New ("msgDelete_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("msgDelete_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EFINALTEMPDELETE,
    strlist ("RLOC",
      "msgDelete_attr1",
      "msgDelete_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("efinalTempDelete_attr1",
      "efinalTempDelete_attr2",
      "efinalTempDelete_attr3",
      "efinalTempDelete_attr4",
      "efinalTempDelete_attr5",
      "efinalTempDelete_attr6",
      "efinalTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r3_2_ecaAdd (Ptr<Tuple> efinalTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_ecaAdd triggered");

  Ptr<Tuple> result = efinalTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("efinalTemp_attr1",
      "efinalTemp_attr4",
      "efinalTemp_attr5",
      "efinalTemp_attr6",
      "efinalTemp_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Messf::Prov_r3_2_ecaDel (Ptr<Tuple> efinalTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_ecaDel triggered");

  Ptr<Tuple> result = efinalTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("efinalTempDelete_attr1",
      "efinalTempDelete_attr4",
      "efinalTempDelete_attr5",
      "efinalTempDelete_attr6",
      "efinalTempDelete_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Messf::Prov_r3_3_ecaAdd (Ptr<Tuple> efinalTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_ecaAdd triggered");

  Ptr<Tuple> result = efinalTemp;

  result = result->Project (
    EFINAL,
    strlist ("efinalTemp_attr2",
      "efinalTemp_attr3",
      "efinalTemp_attr4",
      "efinalTemp_attr5",
      "efinalTemp_attr1",
      "efinalTemp_attr2"),
    strlist ("efinal_attr1",
      "efinal_attr2",
      "efinal_attr3",
      "efinal_attr4",
      "efinal_attr5",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r3_3_ecaDel (Ptr<Tuple> efinalTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_ecaDel triggered");

  Ptr<Tuple> result = efinalTempDelete;

  result = result->Project (
    EFINALDELETE,
    strlist ("efinalTempDelete_attr2",
      "efinalTempDelete_attr3",
      "efinalTempDelete_attr4",
      "efinalTempDelete_attr5",
      "efinalTempDelete_attr1",
      "efinalTempDelete_attr2"),
    strlist ("efinalDelete_attr1",
      "efinalDelete_attr2",
      "efinalDelete_attr3",
      "efinalDelete_attr4",
      "efinalDelete_attr5",
      RN_DEST));

  Send (result);
}

void
Messf::Prov_r3_4_ecaAdd (Ptr<Tuple> efinal)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_ecaAdd triggered");

  Ptr<Tuple> result = efinal;

  result = result->Project (
    FINAL,
    strlist ("efinal_attr1",
      "efinal_attr2"),
    strlist ("final_attr1",
      "final_attr2"));

  Insert (result);
}

void
Messf::Prov_r3_4_ecaDel (Ptr<Tuple> efinalDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_ecaDel triggered");

  Ptr<Tuple> result = efinalDelete;

  result = result->Project (
    FINAL,
    strlist ("efinalDelete_attr1",
      "efinalDelete_attr2"),
    strlist ("final_attr1",
      "final_attr2"));

  Delete (result);
}

void
Messf::Prov_r3_5_ecaAdd (Ptr<Tuple> efinal)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_ecaAdd triggered");

  Ptr<Tuple> result = efinal;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("final")),
          VarExpr::New ("efinal_attr1")),
        VarExpr::New ("efinal_attr2")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("efinal_attr1",
      "VID",
      "efinal_attr3",
      "efinal_attr5",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Messf::Prov_r3_5_ecaDel (Ptr<Tuple> efinalDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_ecaDel triggered");

  Ptr<Tuple> result = efinalDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("final")),
          VarExpr::New ("efinalDelete_attr1")),
        VarExpr::New ("efinalDelete_attr2")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("efinalDelete_attr1",
      "VID",
      "efinalDelete_attr3",
      "efinalDelete_attr5",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Messf::Prov_edb_1Eca1Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("link_attr1",
      "VID",
      "RID",
      "RLoc",
      "link_attr3"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Messf::Prov_edb_1Eca1Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("link_attr1",
      "VID",
      "RID",
      "RLoc",
      "link_attr3"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Messf::Prov_edb_2Eca1Ins (Ptr<Tuple> source)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Ins triggered");

  Ptr<Tuple> result = source;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("source_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("source")),
            VarExpr::New ("source_attr1")),
          VarExpr::New ("source_attr2")),
        VarExpr::New ("source_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("source_attr1",
      "VID",
      "RID",
      "RLoc",
      "source_attr3"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Messf::Prov_edb_2Eca1Del (Ptr<Tuple> source)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Del triggered");

  Ptr<Tuple> result = source;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("source_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("source")),
            VarExpr::New ("source_attr1")),
          VarExpr::New ("source_attr2")),
        VarExpr::New ("source_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("source_attr1",
      "VID",
      "RID",
      "RLoc",
      "source_attr3"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Messf::Edb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("provQuery_attr3"),
      VarExpr::New ("provQuery_attr1"),
      VarExpr::New ("prov_attr5"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr4",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr4"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Messf::Idb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = AggWrapList::New ()->Compute (result, provQuery, "prov_attr3");

  result = result->Project (
    PQLIST,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "list"),
    strlist ("pQList_attr1",
      "pQList_attr2",
      "pQList_attr3"));

  Insert (result);
}

void
Messf::Idb2_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb2_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    PRESULTTMP,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr4",
      "provQuery_attr3",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Messf::Idb3_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb3_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    PITERATE,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "N"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3"));

  SendLocal (result);
}

void
Messf::Idb4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3"));

  SendLocal (result);
}

void
Messf::Idb5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("RID",
    FItem::New (
      VarExpr::New ("pQList_attr3"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("pIterate_attr2")),
        VarExpr::New ("RID")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Project (
    ERULEQUERY,
    strlist ("pIterate_attr1",
      "NQID",
      "RID"),
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3"));

  SendLocal (result);
}

void
Messf::Idb6_eca (Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO ("Idb6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    eRuleQuery,
    strlist ("prov_attr3", "prov_attr1"),
    strlist ("eRuleQuery_attr3", "eRuleQuery_attr1"));

  result = result->Project (
    RULEQUERY,
    strlist ("prov_attr4",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3",
      "eRuleQuery_attr1",
      "prov_attr4"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      RN_DEST));

  Send (result);
}

void
Messf::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Messf::Idb8Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pResultTmp,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Messf::Idb8Eca1Ins (Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO ("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    pQList,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("pQList_attr2", "pQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pQList_attr1",
      "pQList_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Messf::Idb9_eca (Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO ("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    ePReturn,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("ePReturn_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "ePReturn_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Messf::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ruleQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr5"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3"));

  Insert (result);
}

void
Messf::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr4",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Messf::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Messf::Rv4_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Messf::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr3"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    EPROVQUERY,
    strlist ("rIterate_attr1",
      "NQID",
      "VID"),
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3"));

  SendLocal (result);
}

void
Messf::Rv6_eca (Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eProvQuery_attr1")));

  result = result->Project (
    PROVQUERY,
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "$1"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4"));

  SendLocal (result);
}

void
Messf::Rv7_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    pReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("pReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("pReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("pReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("pReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Messf::Rv8Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
Messf::Rv8Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
Messf::Rv9_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rResultTmp_attr4", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("ruleExec_attr4"),
      VarExpr::New ("ruleExec_attr3"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

